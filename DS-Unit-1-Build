{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "project unit 1 data.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "BaRwhSF6nIsI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wzh7V7gFyy8q",
        "colab_type": "text"
      },
      "source": [
        "#Data upload"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z8B1rpZZ_-Vk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#upload car data locally\n",
        "#from google.colab import files\n",
        "#uploaded = files.upload()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5vVVPsE9noI_",
        "colab_type": "code",
        "outputId": "b5c64d9a-36f7-4b36-a6e6-6700ff9de4e5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "Main_data = pd.read_csv('Firearm Murders.csv')\n",
        "Main_data.head()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>State</th>\n",
              "      <th>Total</th>\n",
              "      <th>Total minus Unknown</th>\n",
              "      <th>Type</th>\n",
              "      <th>By Type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>13366</td>\n",
              "      <td>Handguns</td>\n",
              "      <td>11497</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>13366</td>\n",
              "      <td>Rifles</td>\n",
              "      <td>745</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>13366</td>\n",
              "      <td>Shotguns</td>\n",
              "      <td>1124</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>13366</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1992</td>\n",
              "      <td>National</td>\n",
              "      <td>15489</td>\n",
              "      <td>14397</td>\n",
              "      <td>Handguns</td>\n",
              "      <td>12580</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Year     State  Total  Total minus Unknown      Type  By Type\n",
              "0  1991  National  14373                13366  Handguns    11497\n",
              "1  1991  National  14373                13366    Rifles      745\n",
              "2  1991  National  14373                13366  Shotguns     1124\n",
              "3  1991  National  14373                13366   Unknown     1007\n",
              "4  1992  National  15489                14397  Handguns    12580"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Pl84IhM4v72_",
        "colab_type": "text"
      },
      "source": [
        "#Data frame cleaning start:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UWcU5vQGAwUN",
        "colab_type": "code",
        "outputId": "4a21b817-0d5f-4e8e-ed95-3663e1cabaa9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "#Rename columns and drop redundent column\n",
        "Main_data = Main_data.rename(columns={\"Total minus Unknown\": \"Unknown\", 'Type':\"Gun Type\"})\n",
        "Main_data = Main_data.drop(columns=['Unknown'])\n",
        "print(Main_data.shape)\n",
        "Main_data.head()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(2632, 5)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>State</th>\n",
              "      <th>Total</th>\n",
              "      <th>Gun Type</th>\n",
              "      <th>By Type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>Handguns</td>\n",
              "      <td>11497</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>Rifles</td>\n",
              "      <td>745</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>Shotguns</td>\n",
              "      <td>1124</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1992</td>\n",
              "      <td>National</td>\n",
              "      <td>15489</td>\n",
              "      <td>Handguns</td>\n",
              "      <td>12580</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Year     State  Total  Gun Type  By Type\n",
              "0  1991  National  14373  Handguns    11497\n",
              "1  1991  National  14373    Rifles      745\n",
              "2  1991  National  14373  Shotguns     1124\n",
              "3  1991  National  14373   Unknown     1007\n",
              "4  1992  National  15489  Handguns    12580"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JgQI55KFAkGc",
        "colab_type": "code",
        "outputId": "835fc21e-9dac-4868-daf5-bc26132338e4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "source": [
        "Main_data.dtypes"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Year         int64\n",
              "State       object\n",
              "Total        int64\n",
              "Gun Type    object\n",
              "By Type      int64\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hzsRI50AvbGx",
        "colab_type": "code",
        "outputId": "3f9b9308-9eb6-4168-9146-5a13de23630e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "Main_data['Gun Type'].unique()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Handguns', 'Rifles', 'Shotguns', 'Unknown', 'Handgun', 'Rifle',\n",
              "       'Shotgun'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B-PnzCHTn7rF",
        "colab_type": "code",
        "outputId": "7b4ae6dc-384c-46b7-d612-fb561bc84142",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "#clean the data catagorial names for consistency #droping the \"s\"\n",
        "Main_data['Gun Type'] = Main_data['Gun Type'].replace({\"Handguns\":\"Handgun\",\n",
        "                                                       \"Shotguns\":\"Shotgun\",\n",
        "                                                       \"Rifles\":\"Rifle\"})\n",
        "print(Main_data.shape)\n",
        "Main_data.head()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(2632, 5)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>State</th>\n",
              "      <th>Total</th>\n",
              "      <th>Gun Type</th>\n",
              "      <th>By Type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>11497</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>745</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>1124</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1992</td>\n",
              "      <td>National</td>\n",
              "      <td>15489</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>12580</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Year     State  Total Gun Type  By Type\n",
              "0  1991  National  14373  Handgun    11497\n",
              "1  1991  National  14373    Rifle      745\n",
              "2  1991  National  14373  Shotgun     1124\n",
              "3  1991  National  14373  Unknown     1007\n",
              "4  1992  National  15489  Handgun    12580"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tBE3cekf5V0c",
        "colab_type": "code",
        "outputId": "ad9a0b46-b36b-4495-c109-9b486f5c2891",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "#Drop USA territories\n",
        "\n",
        "drop = Main_data[Main_data['State'] != \"Guam\"]\n",
        "drop = drop[drop['State']!= 'District of Columbia']\n",
        "drop = drop[drop['State']!= 'Virgin Islands']\n",
        "drop = drop[drop['State']!= 'U.S. Virgin Islands']\n",
        "print(drop.shape)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(2568, 5)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Hr2j7kfD-kvS",
        "colab_type": "code",
        "outputId": "9b601703-682d-42fb-c71a-05717ccea274",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "#Rename to new a new Main \n",
        "Mainv2 = drop\n",
        "print(Mainv2.shape)\n",
        "Mainv2.head()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(2568, 5)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>State</th>\n",
              "      <th>Total</th>\n",
              "      <th>Gun Type</th>\n",
              "      <th>By Type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>11497</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>745</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>1124</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1992</td>\n",
              "      <td>National</td>\n",
              "      <td>15489</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>12580</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Year     State  Total Gun Type  By Type\n",
              "0  1991  National  14373  Handgun    11497\n",
              "1  1991  National  14373    Rifle      745\n",
              "2  1991  National  14373  Shotgun     1124\n",
              "3  1991  National  14373  Unknown     1007\n",
              "4  1992  National  15489  Handgun    12580"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ekIkxPX0-5my",
        "colab_type": "code",
        "outputId": "d35affb3-46b7-4e09-ddf9-448c64ce199b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "#check if USA territories where dropped \n",
        "Mainv2['State'].unique()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['National', 'Alabama', 'Alaska', 'Arizona', 'Arkansas',\n",
              "       'California', 'Colorado', 'Connecticut', 'Delaware', 'Georgia',\n",
              "       'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas',\n",
              "       'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts',\n",
              "       'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana',\n",
              "       'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico',\n",
              "       'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma',\n",
              "       'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina',\n",
              "       'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont',\n",
              "       'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JgHgmvE3tT-0",
        "colab_type": "text"
      },
      "source": [
        "#foundation for the creation of 2 individual DF"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "B1nkF53lqEyK",
        "colab": {}
      },
      "source": [
        "### make individual DataFrames per weapon type ### \n",
        "\n",
        "#isolate every gun type, individual DF\n",
        "Handgun_only = Mainv2.loc[Mainv2['Gun Type']=='Handgun']\n",
        "Rifle_only = Mainv2.loc[Mainv2['Gun Type']=='Rifle']\n",
        "Shotgun_only = Mainv2.loc[Mainv2['Gun Type']=='Shotgun']\n",
        "Unknown_only = Mainv2.loc[Mainv2['Gun Type']=='Unknown']\n",
        "\n",
        "#reset index\n",
        "Handgun_only = Handgun_only.reset_index(drop=True)\n",
        "Rifle_only = Rifle_only.reset_index(drop=True)\n",
        "Shotgun_only = Shotgun_only.reset_index(drop=True)\n",
        "Unknown_only = Unknown_only.reset_index(drop=True)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "63cwpCXJuzms",
        "colab_type": "text"
      },
      "source": [
        "#Second data frame national yearly stats only"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RFixAa6zFzAJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#calculate national totals per weapon type\n",
        "\n",
        "\n",
        "def find_national(gun_type_df):\n",
        "  totals = []\n",
        "  for year in range(2004,2017):\n",
        "    temp_df = gun_type_df.loc[gun_type_df['Year'] == year]\n",
        "    totals.append(temp_df['By Type'].sum())\n",
        "  return totals"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1Jo24im0VrwS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "years = list(range(2004,2017))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SxYiY97y6nHi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def find_total(data_frame):\n",
        "  #organize national totals to corresponding year\n",
        "  # Two iterables are passed\n",
        "  result = zip(years, find_national(data_frame))\n",
        "\n",
        "  # Converting itertor to set\n",
        "  resultSet = set(result)\n",
        "  return resultSet\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dVBiioa2gvwN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#store values of year totals per weapon \n",
        "hg = find_national(Handgun_only)\n",
        "ar = find_national(Rifle_only)\n",
        "sg = find_national(Shotgun_only)\n",
        "unk = find_national(Unknown_only)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yOSuFuT4gLrA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#create individual DF for concating\n",
        "rowsdfhg = pd.DataFrame(hg,columns = ['Handgun Casualties'])\n",
        "rowsdfar = pd.DataFrame(ar, columns = ['Rifle Casualties'])\n",
        "rowsdfsg = pd.DataFrame(sg,columns =['Shotgun Casualties'])\n",
        "rowsdfunk = pd.DataFrame(unk, columns=['Unkown casualties'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7xYSmiI7iz_x",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "outputId": "a3e88335-af02-48db-baa9-9958cfdc0cb6"
      },
      "source": [
        "  ###create final DF###\n",
        "\n",
        "#concat all the weapon DF\n",
        "national_only = pd.concat([rowsdfhg,rowsdfar,rowsdfsg,rowsdfunk],axis=1)\n",
        "\n",
        "# add the total of the rows to get year total casualties\n",
        "national_only[\"Total\"] = national_only.sum(axis=1)\n",
        "# add year column\n",
        "national_only[\"Year\"] = list(range(2004,2017))\n",
        "\n",
        "\n",
        "\n",
        "print(national_only.shape)\n",
        "national_only.head()"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(13, 6)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Handgun Casualties</th>\n",
              "      <th>Rifle Casualties</th>\n",
              "      <th>Shotgun Casualties</th>\n",
              "      <th>Unkown casualties</th>\n",
              "      <th>Total</th>\n",
              "      <th>Year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7265</td>\n",
              "      <td>393</td>\n",
              "      <td>507</td>\n",
              "      <td>1161</td>\n",
              "      <td>9326</td>\n",
              "      <td>2004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7543</td>\n",
              "      <td>442</td>\n",
              "      <td>517</td>\n",
              "      <td>1598</td>\n",
              "      <td>10100</td>\n",
              "      <td>2005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7795</td>\n",
              "      <td>436</td>\n",
              "      <td>481</td>\n",
              "      <td>1465</td>\n",
              "      <td>10177</td>\n",
              "      <td>2006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7361</td>\n",
              "      <td>450</td>\n",
              "      <td>455</td>\n",
              "      <td>1820</td>\n",
              "      <td>10086</td>\n",
              "      <td>2007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6755</td>\n",
              "      <td>375</td>\n",
              "      <td>444</td>\n",
              "      <td>1910</td>\n",
              "      <td>9484</td>\n",
              "      <td>2008</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Handgun Casualties  Rifle Casualties  ...  Total  Year\n",
              "0                7265               393  ...   9326  2004\n",
              "1                7543               442  ...  10100  2005\n",
              "2                7795               436  ...  10177  2006\n",
              "3                7361               450  ...  10086  2007\n",
              "4                6755               375  ...   9484  2008\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-YLRUa63xKMI",
        "colab_type": "text"
      },
      "source": [
        "#Main data reshaped"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CPG4j7xqlBHN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "### Drop and rename columns duplicates names ###\n",
        "\n",
        "Rifle_only = Rifle_only.drop(columns=[\"Year\",\"State\",\"Total\"])\n",
        "Rifle_only = Rifle_only.rename(columns={\"Gun Type\":\"Rifle\",\"By Type\":\"Rifle Casualties\"})\n",
        "Shotgun_only = Shotgun_only.rename(columns={\"Gun Type\":\"Shotgun\",\"By Type\":\"Shotgun Casualties\"})\n",
        "Shotgun_only = Shotgun_only.drop(columns=[\"Year\",\"State\",\"Total\"])\n",
        "Unknown_only = Unknown_only.drop(columns=[\"Year\",\"State\",\"Total\"])\n",
        "Unknown_only = Unknown_only.rename(columns={\"Gun Type\":\"Unknown\",\"By Type\":\"Unknown Casualties\"})\n",
        "Handgun_only = Handgun_only.rename(columns={\"Gun Type\":\"Handgun\",\"By Type\":\"Handgun Casualties\"})"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4O-t2sk4p0fA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "outputId": "34a122e7-1997-43f4-8da0-560ba73db370"
      },
      "source": [
        "Mainv3 = pd.concat([Handgun_only,Rifle_only,Shotgun_only,Unknown_only],axis=1)\n",
        "print(Mainv3.shape)\n",
        "Mainv3.head()"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(642, 11)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>State</th>\n",
              "      <th>Total</th>\n",
              "      <th>Handgun</th>\n",
              "      <th>Handgun Casualties</th>\n",
              "      <th>Rifle</th>\n",
              "      <th>Rifle Casualties</th>\n",
              "      <th>Shotgun</th>\n",
              "      <th>Shotgun Casualties</th>\n",
              "      <th>Unknown</th>\n",
              "      <th>Unknown Casualties</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>11497</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>745</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>1124</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1992</td>\n",
              "      <td>National</td>\n",
              "      <td>15489</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>12580</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>706</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>1111</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1092</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1993</td>\n",
              "      <td>National</td>\n",
              "      <td>16136</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>13212</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>757</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>1057</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1110</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1994</td>\n",
              "      <td>National</td>\n",
              "      <td>15463</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>12775</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>724</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>953</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1011</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1995</td>\n",
              "      <td>National</td>\n",
              "      <td>13790</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>11282</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>654</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>929</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>925</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Year     State  Total  ... Shotgun Casualties  Unknown Unknown Casualties\n",
              "0  1991  National  14373  ...               1124  Unknown               1007\n",
              "1  1992  National  15489  ...               1111  Unknown               1092\n",
              "2  1993  National  16136  ...               1057  Unknown               1110\n",
              "3  1994  National  15463  ...                953  Unknown               1011\n",
              "4  1995  National  13790  ...                929  Unknown                925\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7vjIRQsjyk9R",
        "colab_type": "text"
      },
      "source": [
        "#Final Data sets "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PiQl7pdiuCpP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "outputId": "3261818d-ecc5-4203-f0f2-90d8fb95c1a0"
      },
      "source": [
        "print(Mainv3.shape)\n",
        "Mainv3.head()"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(642, 11)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>State</th>\n",
              "      <th>Total</th>\n",
              "      <th>Handgun</th>\n",
              "      <th>Handgun Casualties</th>\n",
              "      <th>Rifle</th>\n",
              "      <th>Rifle Casualties</th>\n",
              "      <th>Shotgun</th>\n",
              "      <th>Shotgun Casualties</th>\n",
              "      <th>Unknown</th>\n",
              "      <th>Unknown Casualties</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1991</td>\n",
              "      <td>National</td>\n",
              "      <td>14373</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>11497</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>745</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>1124</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1992</td>\n",
              "      <td>National</td>\n",
              "      <td>15489</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>12580</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>706</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>1111</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1092</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1993</td>\n",
              "      <td>National</td>\n",
              "      <td>16136</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>13212</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>757</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>1057</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1110</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1994</td>\n",
              "      <td>National</td>\n",
              "      <td>15463</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>12775</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>724</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>953</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>1011</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1995</td>\n",
              "      <td>National</td>\n",
              "      <td>13790</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>11282</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>654</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>929</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>925</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Year     State  Total  ... Shotgun Casualties  Unknown Unknown Casualties\n",
              "0  1991  National  14373  ...               1124  Unknown               1007\n",
              "1  1992  National  15489  ...               1111  Unknown               1092\n",
              "2  1993  National  16136  ...               1057  Unknown               1110\n",
              "3  1994  National  15463  ...                953  Unknown               1011\n",
              "4  1995  National  13790  ...                929  Unknown                925\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vcuVV7mSuOQA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "outputId": "ecb5ee55-e712-477f-918f-958199b9348e"
      },
      "source": [
        "print(national_only.shape)\n",
        "national_only.head()"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(13, 6)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Handgun Casualties</th>\n",
              "      <th>Rifle Casualties</th>\n",
              "      <th>Shotgun Casualties</th>\n",
              "      <th>Unkown casualties</th>\n",
              "      <th>Total</th>\n",
              "      <th>Year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7265</td>\n",
              "      <td>393</td>\n",
              "      <td>507</td>\n",
              "      <td>1161</td>\n",
              "      <td>9326</td>\n",
              "      <td>2004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7543</td>\n",
              "      <td>442</td>\n",
              "      <td>517</td>\n",
              "      <td>1598</td>\n",
              "      <td>10100</td>\n",
              "      <td>2005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7795</td>\n",
              "      <td>436</td>\n",
              "      <td>481</td>\n",
              "      <td>1465</td>\n",
              "      <td>10177</td>\n",
              "      <td>2006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7361</td>\n",
              "      <td>450</td>\n",
              "      <td>455</td>\n",
              "      <td>1820</td>\n",
              "      <td>10086</td>\n",
              "      <td>2007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6755</td>\n",
              "      <td>375</td>\n",
              "      <td>444</td>\n",
              "      <td>1910</td>\n",
              "      <td>9484</td>\n",
              "      <td>2008</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Handgun Casualties  Rifle Casualties  ...  Total  Year\n",
              "0                7265               393  ...   9326  2004\n",
              "1                7543               442  ...  10100  2005\n",
              "2                7795               436  ...  10177  2006\n",
              "3                7361               450  ...  10086  2007\n",
              "4                6755               375  ...   9484  2008\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xD-DenDQ3G-n",
        "colab_type": "text"
      },
      "source": [
        "#first graph idea line plot\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "77RKvR6o3E1g",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "outputId": "706f7dc0-6f5e-49f5-cc9c-245cba1787c4"
      },
      "source": [
        "plt.plot(national_only['Year'],national_only['Total'])\n",
        "plt.plot(national_only['Year'],national_only['Handgun Casualties'],c='red')\n",
        "plt.plot(national_only['Year'],national_only['Rifle Casualties'],c='orange')\n",
        "plt.plot(national_only['Year'],national_only['Shotgun Casualties'],c='green')\n",
        "plt.plot(national_only['Year'],national_only['Unkown casualties'],c='black');\n",
        "\n",
        "#labels\n",
        "plt.xlabel('Years',fontsize=25,color='#9b0000')\n",
        "plt.ylabel('National Count',fontsize=20,color='#9b0000')\n",
        "plt.title('',fontsize=25,loc='left',y=1.1,color='#002147')\n",
        "plt.suptitle('2016 Gun Type Casualties Per State',fontsize=18,x=.22,y=.95,color='808080')\n",
        "plt.xticks(size = 15,color='#9b0000')\n",
        "plt.yticks(size = 10,color='#9b0000')\n",
        "plt.show()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nB71HC5c/eKHdAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yfFFQwbQ462E",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "329d85f2-d344-48f3-d58d-9efe2f3e20dd"
      },
      "source": [
        "plt.plot(national_only['Year'],national_only['Rifle Casualties'],c='orange')\n",
        "plt.plot(national_only['Year'],national_only['Shotgun Casualties'],c='green')\n"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f458487d6d8>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n9Eop5eP+H7c0lXAAl9i4AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xkYvd3ji6GKY",
        "colab_type": "text"
      },
      "source": [
        "#second graph stacked bar"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nroAY9QSMoh4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from textwrap import wrap"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CWRC25AM4I85",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "1132f020-b3c0-4a14-c9dd-5f516b92527c"
      },
      "source": [
        "twenty16 = Mainv3.loc[Mainv3[\"Year\"]==2016]\n",
        "twenty16 = twenty16.reset_index(drop=True)\n",
        "twenty16.head()"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>State</th>\n",
              "      <th>Total</th>\n",
              "      <th>Handgun</th>\n",
              "      <th>Handgun Casualties</th>\n",
              "      <th>Rifle</th>\n",
              "      <th>Rifle Casualties</th>\n",
              "      <th>Shotgun</th>\n",
              "      <th>Shotgun Casualties</th>\n",
              "      <th>Unknown</th>\n",
              "      <th>Unknown Casualties</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2016</td>\n",
              "      <td>Alaska</td>\n",
              "      <td>43</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>12</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>4</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>1</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2016</td>\n",
              "      <td>Arizona</td>\n",
              "      <td>227</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>156</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>16</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>10</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2016</td>\n",
              "      <td>Arkansas</td>\n",
              "      <td>151</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>72</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>11</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>3</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2016</td>\n",
              "      <td>California</td>\n",
              "      <td>1368</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>930</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>37</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>36</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>365</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2016</td>\n",
              "      <td>Colorado</td>\n",
              "      <td>136</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>87</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>4</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>4</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Year       State  Total  ... Shotgun Casualties  Unknown Unknown Casualties\n",
              "0  2016      Alaska     43  ...                  1  Unknown                 26\n",
              "1  2016     Arizona    227  ...                 10  Unknown                 45\n",
              "2  2016    Arkansas    151  ...                  3  Unknown                 65\n",
              "3  2016  California   1368  ...                 36  Unknown                365\n",
              "4  2016    Colorado    136  ...                  4  Unknown                 41\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4dmSFE9-I4KB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "us_state_abbrev = {\n",
        "    'Alabama': 'AL',\n",
        "    'Alaska': 'AK',\n",
        "    'Arizona': 'AZ',\n",
        "    'Arkansas': 'AR',\n",
        "    'California': 'CA',\n",
        "    'Colorado': 'CO',\n",
        "    'Connecticut': 'CT',\n",
        "    'Delaware': 'DE',\n",
        "    'District of Columbia': 'DC',\n",
        "    'Florida': 'FL',\n",
        "    'Georgia': 'GA',\n",
        "    'Hawaii': 'HI',\n",
        "    'Idaho': 'ID',\n",
        "    'Illinois': 'IL',\n",
        "    'Indiana': 'IN',\n",
        "    'Iowa': 'IA',\n",
        "    'Kansas': 'KS',\n",
        "    'Kentucky': 'KY',\n",
        "    'Louisiana': 'LA',\n",
        "    'Maine': 'ME',\n",
        "    'Maryland': 'MD',\n",
        "    'Massachusetts': 'MA',\n",
        "    'Michigan': 'MI',\n",
        "    'Minnesota': 'MN',\n",
        "    'Mississippi': 'MS',\n",
        "    'Missouri': 'MO',\n",
        "    'Montana': 'MT',\n",
        "    'Nebraska': 'NE',\n",
        "    'Nevada': 'NV',\n",
        "    'New Hampshire': 'NH',\n",
        "    'New Jersey': 'NJ',\n",
        "    'New Mexico': 'NM',\n",
        "    'New York': 'NY',\n",
        "    'North Carolina': 'NC',\n",
        "    'North Dakota': 'ND',\n",
        "    'Northern Mariana Islands':'MP',\n",
        "    'Ohio': 'OH',\n",
        "    'Oklahoma': 'OK',\n",
        "    'Oregon': 'OR',\n",
        "    'Palau': 'PW',\n",
        "    'Pennsylvania': 'PA',\n",
        "    'Puerto Rico': 'PR',\n",
        "    'Rhode Island': 'RI',\n",
        "    'South Carolina': 'SC',\n",
        "    'South Dakota': 'SD',\n",
        "    'Tennessee': 'TN',\n",
        "    'Texas': 'TX',\n",
        "    'Utah': 'UT',\n",
        "    'Vermont': 'VT',\n",
        "    'Virgin Islands': 'VI',\n",
        "    'Virginia': 'VA',\n",
        "    'Washington': 'WA',\n",
        "    'West Virginia': 'WV',\n",
        "    'Wisconsin': 'WI',\n",
        "    'Wyoming': 'WY',\n",
        "}"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cFiM-RKSKj8v",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "801e4250-516e-42fd-9d0b-6d3a53f010c8"
      },
      "source": [
        "twenty16['abbrev'] = twenty16['State'].map(us_state_abbrev)\n",
        "twenty16.head()"
      ],
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Year</th>\n",
              "      <th>State</th>\n",
              "      <th>Total</th>\n",
              "      <th>Handgun</th>\n",
              "      <th>Handgun Casualties</th>\n",
              "      <th>Rifle</th>\n",
              "      <th>Rifle Casualties</th>\n",
              "      <th>Shotgun</th>\n",
              "      <th>Shotgun Casualties</th>\n",
              "      <th>Unknown</th>\n",
              "      <th>Unknown Casualties</th>\n",
              "      <th>abbrev</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2016</td>\n",
              "      <td>Alaska</td>\n",
              "      <td>43</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>12</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>4</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>1</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>26</td>\n",
              "      <td>AK</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2016</td>\n",
              "      <td>Arizona</td>\n",
              "      <td>227</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>156</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>16</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>10</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>45</td>\n",
              "      <td>AZ</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2016</td>\n",
              "      <td>Arkansas</td>\n",
              "      <td>151</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>72</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>11</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>3</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>65</td>\n",
              "      <td>AR</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2016</td>\n",
              "      <td>California</td>\n",
              "      <td>1368</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>930</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>37</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>36</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>365</td>\n",
              "      <td>CA</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2016</td>\n",
              "      <td>Colorado</td>\n",
              "      <td>136</td>\n",
              "      <td>Handgun</td>\n",
              "      <td>87</td>\n",
              "      <td>Rifle</td>\n",
              "      <td>4</td>\n",
              "      <td>Shotgun</td>\n",
              "      <td>4</td>\n",
              "      <td>Unknown</td>\n",
              "      <td>41</td>\n",
              "      <td>CO</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Year       State  Total  ...  Unknown  Unknown Casualties abbrev\n",
              "0  2016      Alaska     43  ...  Unknown                  26     AK\n",
              "1  2016     Arizona    227  ...  Unknown                  45     AZ\n",
              "2  2016    Arkansas    151  ...  Unknown                  65     AR\n",
              "3  2016  California   1368  ...  Unknown                 365     CA\n",
              "4  2016    Colorado    136  ...  Unknown                  41     CO\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pVlwkqJV8431",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "states = twenty16.iloc[:,11]\n",
        "handgun_bar = twenty16.iloc[:,4]\n",
        "rifle_bar = twenty16.iloc[:,6]\n",
        "shotgun_bar = twenty16.iloc[:,8]\n",
        "unknown_bar = twenty16.iloc[:,10]\n",
        "indx = states"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7Q4cTZmnKNG9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 823
        },
        "outputId": "e99f62d3-c628-4623-fcb6-23b3d9f6a2e0"
      },
      "source": [
        "import matplotlib.patches as mpatches\n",
        "#graphing data \n",
        "plt.figure(figsize=(26,12))\n",
        "barWidth = .7\n",
        "graphhand = plt.bar(x=indx, height=handgun_bar, width=barWidth,color='#b0dfe5')\n",
        "graphrifle = plt.bar(x=indx, height=unknown_bar, width=barWidth,color='lightgray', bottom=handgun_bar)\n",
        "graphshotgun = plt.bar(x=indx, height=shotgun_bar, width=barWidth,color ='orange', bottom=handgun_bar+unknown_bar)\n",
        "graphunknown = plt.bar(x=indx, height=rifle_bar, width=barWidth, color='green', bottom=handgun_bar+unknown_bar+shotgun_bar)\n",
        "\n",
        "#legend \n",
        "H_patch = mpatches.Patch(color='#b0dfe5',label='Handgun Casualties')\n",
        "U_patch = mpatches.Patch(color='lightgray',label='Unknown Type Casualties')\n",
        "S_patch = mpatches.Patch(color='orange',label='Shotgun Casualties')\n",
        "R_patch = mpatches.Patch(color='green',label='Rifle Casualties')\n",
        "plt.legend(handles=[H_patch,U_patch,S_patch,R_patch],loc=0,fontsize=15)\n",
        "\n",
        "#labels\n",
        "plt.xlabel('States',fontsize=25,color='#9b0000')\n",
        "plt.ylabel('Total Casualty',fontsize=20,color='#9b0000')\n",
        "plt.title('Handguns Dominate Gun violence Across the U.S',fontsize=25,loc='left',y=1.1,color='#002147')\n",
        "plt.suptitle('2016 Gun Type Casualties Per State',fontsize=18,x=.22,y=.95,color='808080')\n",
        "plt.xticks(size = 15,color='#9b0000')\n",
        "plt.yticks(size = 10,color='#9b0000')\n",
        "plt.show()"
      ],
      "execution_count": 262,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nYi3fXwDOwAZm/QmI4jh+tMD2z/OvNPi8Tc60XXMXjOP4Yayi4EO/3/Ox4N2+cRzfUJ2DieN4PhaE\n3x8LUB6OBRYv89OfBXaN4/j4vFX/jAWaDwHGYIHoXaj9GAD14VYsv/xi7FoV8zxwIBYEHoOlRRoL\n9M+tbInjeI6fdz5WeXExlkc9DeRPqE6h4ji+FwuIXovdT5dg5/wQ4BVgpziOn/LLPgkcjLXEvgBL\ni/SdL+uCvE3fiOVKPwKrxDgTa3m9XxzHN+bs/z0sAP293+ZfsbQ8Rxco60TKW3WPAU7BUtoU7J1Q\nxNFYhcXZwB3Y96SoOI7/jQ32+yTl9+PJwKbYOU8HLH4ceA7YFzuHF2PBdYf1fKkzcRy/hH0XJ2Pf\niyux89sDqzSqTsqkUk7AevHsiA1eez0wHAvAD6FyJVHBcxrH8bvAXlg++7Ow69sGGz+h0Pgap/n9\nnoR9X+4A2vttVfc6iIiIiIiIiIhIPQqSpKaprEV+XXzKoS+Bp+I43q/A/BbAfOD6OI5LtqgXERER\nERERERERaQhqmS8rg8OxQWLHN3RBRERERERERERERGpDOfNlheWc2w/LY/8P4FXg4YYtkYiIiIiI\niIiIiEjtKJgvK7LrsRzvL2EDASunlIiIiIiIiIiIiPwqKWe+iIiIiIiIiIiIiEgjp5z5IiIiIiIi\nIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIi\nIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5\nIiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKN\nnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIi\nIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIi\nIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIi\nIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5\nIiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKN\nnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIi\nIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIi\nIiIiIiKNnIL5IiIiIiIiIiIiIiKN3CoNXYCGsvrqqyddu3Zt6GKIiIiIiIiIiIiIyEps+vTps5Mk\nWaOq5VbaYH7Xrl15+eWXG7oYIiIiIiIiIiIiIrISC4Lgk+ospzQ7IiIiIiIiIiIiIiKNnIL5IiIi\nIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5IiIiIiIiIiIiIiKNnIL5\nIiIiIiIiIiIiIiKN3CoNXQARERERERERERGBefPmMWvWLBYtWtTQRRGROtKsWTPWXHNN2rVrt8zb\nUjBfRERERERERESkgc2bN4+vv/6aLl260LJlS4IgaOgiicgySpKE+fPn8/nnnwMsc0BfaXZERERE\nREREREQa2KxZs+jSpQutWrVSIF9kBREEAa1ataJLly7MmjVrmbenYL6IiIiIiIiIiEgDW7RoES1b\ntmzoYohIPWjZsmWdpM9SMF9ERERERERERKQRUIt8kRVTXX23FcwXEREREREREREREWnkGnQA3AlB\ncAPwR2DWsCTZIm/eX4HLgDWGJcnsCVZ9cQWwF/AzMGRYkrzilz0cGOlXPX9Ykty0vI5BRERERERE\nRERERKS+NWgwH5gIXAXcnDtxQhCsB+wBfJozuR+wiX/tAFwL7DAhCDoC5wA9gASYPiEIHhiWJN/V\ne+lFRERERERERETqUebTr/hl6dLlvt/mTZoQrb9WjdYZNWoUV111FbNnz640b8iQIcyYMYOXX365\nropY0o8//kjbtm258cYbGTJkyHLZZ0289tprXHjhhTzzzDPMmTOH1VdfnV122YWTTjqJnj17NnTx\nCgqCgCuvvJIRI0YAMH78eNZcc03233//Cst17dqVgQMHctlllzVEMVdoDZpmZ1iSTAXmFJgVA6dh\nwfnUfsDNw5IkGZYkLwDtJwTB2sCewH+GJckcH8D/DxDVc9FFRERERERERETqXUME8htyvyuDKVOm\nsP322/Ptt98SxzGPP/44Y8aMYe7cueyxxx4NXbxqGz9+PPfdd1+l6ffeey8nnHBCA5RoxdfQLfMr\nmRAE+wGfD0uS1ydUHBigC/BZzueZflqx6ZUEQXA0cDTA+uuvX4elFhERERERERERESntiy++4PDD\nD2fw4MFMnDixwsCogwcP5sEHH2zA0tWNbbbZpqGLsMJqVAPgTgiCVsCZwNn1sf0kScYnSdIjSZIe\na6yxRn3sQkRERERERERERKrw5ZdfcuSRRxKGIS1btmTTTTdl5MiRLFy4sGyZjz/+mCAIuPPOOznm\nmGNYbbXVWHfddTnnnHNYmtdz4J577mHTTTelZcuW7Lzzzrz77ruV9vnLL7/wl7/8hfbt29OpUydO\nPfVUxo4dWyGgngbYf/zxxwrrdu3alVNOOaXsc58+fRg4cCC33347G2+8Me3ataNfv37MnDmz5HFP\nmDCBhQsXMmbMmAr7Tf3xj38s+/vmm2+md+/edOzYkQ4dOrDLLrtUSlP01ltvEUURHTt2pHXr1nTv\n3p2rr766aLkLHeNPP/3EiBEj2GyzzWjVqhUbbrghw4cPZ968eUWPo0+fPkyfPp2bbrqJIAgIgoCJ\nEycW3eezzz7LH/7wB1q1akWnTp046qij+OGHH8rmf//99wwbNox11lmHFi1asP7663PUUUeVPJcr\no8bWMn8jYEMgbZW/LvDKhCDYHvgcWC9n2XX9tM+BPnnTn14OZRUREREREREREZE8ixcvrjQtSZIK\nn2fPnk3Hjh25/PLL6dChA++//z6jRo3im2++4frrr6+w7GmnncaAAQO4++67eeKJJzj33HP5zW9+\nw6BBgwB45ZVXOOigg+jfvz9XXHEFM2bMKJuXv52JEydywQUX0L17d2688UYmTZpU6+OcNm0aX3zx\nBWPGjGH+/PmceOKJHH300Tz88MNF13nmmWfo0aMHq6++epXb//jjjznssMPYaKONWLhwIXfccQc7\n7bQTb731FmEYArDPPvvQvXt3br31Vpo3b857771XMghfyM8//8ySJUsYPXo0a6yxBp999hmjR4/m\nwAMP5NFHHy24zjXXXMOAAQMIw5CzzjoLgI022qjgss899xy77747+++/P3fffTfffvstZ5xxBt99\n9x133303ACeffDL//e9/ieOYtdZai88++4ypU6fW6DhWBo0qmD8sSd4E1kw/TwiCj4Eew5Jk9oQg\neAAYMSEIJmED4M4dliRfTgiCR4ELJgRBB7/aHsDflnPRRUREREREREREVnrffvstzZo1Kzhvu+22\nK/t7yy23rDBA6o477kjr1q058sgjufLKK1l11VXL5u28886MGTMGgL59+5LJZJgyZUpZwP6iiy5i\n00035c477yQIAvr168fChQsZOXJkhXKNHz+ec889F+ccAHvuuSdbbLFFrY913rx5PPTQQ3ToYGHJ\nr776Cucc8+fPp2XLlgXX+fzzz6udhubss8uTlyxdupS+ffvy4osvcuutt3L22Wcze/ZsPvroI+6/\n/3623HJLAHbbbbcaH8caa6zBtddeW/Z58eLFbLjhhvTu3ZtPP/20YLryzTffnNatW7PGGmvQq1ev\nkts/44wz+P3vf8/kyZPLpnXp0oXddtuNGTNmsMUWW/Diiy8yfPhwDjrooLJlDj300Bofy4quQdPs\nTAiCO4Dngc0mBMHMCUEwtMTiDwNZ4EPgn8BxAMOSZA5wHvCSf53rp4mIiIiIiIiIiMhytNpqq/HS\nSy9VeuWmjwFrqT927Fg233xzWrZsSbNmzTjkkEP45Zdf+PTTTyssmz8o7Oabb14hnc2LL77Ivvvu\nWyFtzQEHHFBhnTfffJMFCxaw7777lk0LgoB99tmn1sfas2fPskB+Wi6wgH0phdLrFPLOO+/Qv39/\nOnfuTNOmTWnWrBnvvfce77//PgAdO3ZkvfXW49hjj2Xy5MnMmjWrlkcCt9xyC9tssw1t2rShWbNm\n9O7dG6BsX7X1888/8/zzzzNo0CAWL15c9urduzfNmjVj+vTpAPz2t7/l0ksv5Zprrlnmfa7IGrRl\n/rAkGVzF/K45fyfA8CLL3QDcUKeFExERERERERERkRpZZZVV6NGjR6XpnTp14ssvvyz7PHbsWE49\n9VROP/10/vCHP9ChQwdeeuklhg8fzoIFCyqs2759+wqfV1111QrLfPXVV6y55poVlsn//NVXXwHW\nCj3XsoyrWahcQKXy5+rSpUulyopCfvjhB/bYYw86d+7M5ZdfzgYbbECLFi0YNmxY2fabNGnCY489\nxt///neOPPJI5s+fz4477si4ceNqNAjtvffey2GHHcZf/vIXLrjgAjp27MiXX35J//79Sx5LdXz3\n3XcsWbKE4447juOOO67S/M8++wyAq666irPPPptzzz2X4cOHs/HGG3Peeedx8MEHL9P+VzSNKs2O\niIiIiIiIiIiIrPjuuusuBg4cyOjRo8umvf3227Xa1lprrVWpVXr+57XWWguAb775ho4dO5ZN/+ab\nbyos16JFC4AKA/GCBaXrQp8+fRg9ejRz5sypUI58zz//PDNnzuQ///kP3bp1K5s+d+7cCst169aN\ne+65h0WLFvHss89y+umns/feezNz5kyaNGlCixYtqjyWu+66ix122IFrrrmmbNozzzyzLIdZpn37\n9gRBwKhRo9hrr70qzV9nnXXKlhs3bhzjxo3jjTfe4JJLLuGQQw5hq622KuvxIA2cZkdERERERERE\nRERWPvPnz6d58+YVpt1222212lbPnj154IEHKgyyO2XKlArLbLnllrRo0YL777+/bFqSJPz73/+u\nsNy6664LWIqb1LRp02o8qGwxQ4cOpVmzZpxyyikF5z/00EOAnR+gwjn673//y8cff1xwvWbNmrHr\nrrty8skn8+WXX/L9998Ddjy5xwLw2GOPVfhc22uR30OikNatW9OrVy/ee+89evToUemVBvNzbbXV\nVlx66aUsXbqUd999t8pyrEzUMl9ERERERERERESWq759+zJu3Dh22GEHNtpoI2677TY+/PDDWm3r\n9NNPZ4cddmDQoEEMHTqUGTNm8K9//avCMp06deKoo47inHPOoVmzZnTv3p0bb7yRefPmVchhv/32\n29OlSxdOOOEEzjvvPObMmcMll1xCu3btlul4U+ussw4TJ05k8ODBzJw5kyOPPJIuXbrw+eefM2nS\nJKZOncqcOXPo1asXbdq04aijjuK0005j5syZjBo1ii5dupRt64033uCUU07hoIMOIgxDvvvuOy6+\n+GK23nrrslb//fv35/jjj+eCCy6gZ8+e3HPPPbz11lsVytS3b1+GDx/O6NGj2WGHHXj44Yd54okn\nqjyWbt268eijj/Loo4/SqVMnNtxwQzp16lRpuUsuuYTddtuNJk2aMHDgQNq2bcunn37KQw89xOjR\no9l0003p3bs3/fv3Z4sttiAIAv75z3/SunVrtt9++2U84ysWtcwXERERERERERFppJo3aZjwXX3v\n9+yzz2bw4MGMHDmSwYMHs+qqqzJu3LhabatHjx5MmjSJV199lf3335/77ruPyZMnV1rukksuYciQ\nIYwaNYrBgwfTuXNnhg4dWiFQv+qqq3LvvfeWBZ7HjBnDtddeW2Gg22U1YMAApk2bRvv27TnxxBPL\nWtS3adOGxx9/HIDOnTtz11138dVXX7HffvsxduxYrrvuOjbeeOOy7ay11lp07tyZ0aNH069fP447\n7ji6d+/OAw88ULbM0UcfzUknncS4ceMYNGgQzZs3Z+TIkRXKc8wxx/DXv/6VK664ggMOOIBPPvmE\n22+/vcrjGDlyJN27d9v5fPwAACAASURBVGfQoEH07NmzUi+HVO/evZk6dSrffPMNf/7zn9lnn324\n5JJLWG+99ejcuTMAv/vd75g4cSIDBw5k0KBBzJ49m0ceeaSsp4SYILf7ycqkR48eycsvv9zQxRAR\nEREREREREeGdd96he/fuDV2Mlc7uu+/OokWL6ixHvEgxpb7jQRBMT5Kk8sjReZRmR0RERERERERE\nRFZ4Tz31FNOmTWPbbbdl0aJFTJ48mSeeeIK77rqroYsmUi0K5ouIiIiIiIiIiMgKr02bNtx3331c\neOGFLFiwgE022aQstYvIr4GC+SIiIiIiIiIiIrLC69mzJy+88EJDF0Ok1jQAroiIiIiIiIiIiIhI\nI6eW+SJ1JPhHUKfbS85ZOQenFhERERERERERkcrUMl9EREREREREREREpJFTMF9ERERERERERERE\npJFTMF9EREREREREREREpJFTMF9EREREREREREREpJFTMF9ERERERERERESWWZ8+fRg4cGDBeT16\n9GDIkCE12t7HH39MEAQ8+OCDdVC6xuHpp58mCIIqX43JF198wYgRIwjDkObNm9OxY0f69evHfffd\n19BFK6pXr14ceuihZZ8ffvhhrrrqqkrLHXzwwfTu3Xt5Fm2ZrNLQBRAREREREREREZHC3nnnHZYs\nWbLc99u0aVO6d+++3Pe7ott22215/vnnyz4/99xznHLKKUyZMoW11167AUtW2FtvvcWuu+5Kx44d\nOf300+nWrRtz587lwQcfZNCgQbz55ptsttlmDV3MKj388MM8/vjjjBgxosL0888/n4ULFzZQqWpO\nwXwREREREREREZFGqiEC+Q253xVdu3bt6NWrV9nn2bNnA7DNNtvQtWvXBipVYUuXLuXggw+mS5cu\nTJ06lTZt2pTN23fffTnmmGNo165dA5Zw2W288cYNXYQaUZodERERERERERERWa7SlDy33347G2+8\nMe3ataNfv37MnDmz5HpPPfUUbdu25cwzzwRg4sSJBEHAm2++Sd++fWndujXdunVjypQplda96qqr\n2GSTTWjevPn/s3fvcTrW+R/HXxcmg2lo5DgqWlYiipFDSDnmEEokrUojbVK0Fu0KKTrqQCo1WR10\nolGkIjaxJYcO24/EdlAIOWtDhev3x4x7jRnDmGHu6vV8PO6H+/re3+t7fa6rx/TH+/7e3y+VK1fm\nwQcfjHz29ddfEwQB77//fqStW7duBEHAp59+Gmlr37493bt3B/63ZM7cuXO57LLLiIuL4/TTT+fR\nRx/N1bMBSE1NpWDBgqxduzZD++eff04QBMycORP433IyjzzyCKeeeipFixalQ4cOrF+/PsN5O3fu\n5JZbbiExMZHChQtTu3Zt3n777WxrmD17NkuXLuWee+7JEOTvV6dOncivCebNm0e7du0oV64ccXFx\n1K5dm8mTJ2fov3nzZq6++mrKlStHbGwsp512Gn369Il8ntWSN/vvd/bs2ZG2u+++mzp16hAfH0/Z\nsmXp2LEjX3/99SHvY/DgwYwbN44VK1ZEljG6/vrrD3nNr7/+mssuu4wSJUpQrFgx2rZty5dffhn5\nPAxDRowYwemnn05sbCxly5alTZs2bN68OdvnmRcM8yVJkiRJkiQddwsXLuSRRx5h9OjRPPHEE3z0\n0Udcd911h+w/c+ZM2rZty8CBAxk1alSGz6644gouvvhipk6dSpUqVbj88sszfDHw5JNP0rdvXy6+\n+GKmT5/OZZddxl/+8hfuvvtuACpVqkRiYiLz58+PnDN//nxiY2Mjbfv27eO9996jcePGGa7dq1cv\natWqxdSpU2natCl9+vRh0aJFuXo27du3p2TJkjz77LMZ2v/xj39QoUIFWrRoEWl75513mDBhAg8/\n/DDjx49n0aJFXHbZZZHPwzCkQ4cOPP/88wwbNozp06dTo0YN2rZty/Llyw9Zw7vvvkvhwoW54IIL\nDlvvN998Q9OmTZkwYQKvvfYa7du3p1u3bkydOjXSp2/fvixZsoQxY8Ywc+ZM7rzzTsIwzMljAWDt\n2rXcfPPNTJs2jfHjx7Nz504aNWrEjz/+mGX/Pn360LlzZ0477TQWLFjAggULGDRoUJZ9v//+e847\n7zxWrVpFSkoKL7zwAps2baJly5aR5XiefPJJRo8ezaBBg5g1axbjxo3jtNNOY9euXTm+l5xymR1J\nkiRJkiRJx92OHTuYMWMGJ510EgDr16+nf//+7Nq1iyJFimToO23aNLp06cKdd97JgAEDMo3Vv39/\nevbsCaTNGC9Tpgyvv/46119/Pfv27WP48OFcffXVjB49GoCWLVuyfft27rrrLvr160dsbCyNGzdm\n/vz5DBo0iK+++op169bRu3dv5s+fT58+fVi6dClbt27NFOZ369aNIUOGAGm/OJg+fTqpqamce+65\nR/1sYmJi6NGjBxMnTmTw4MFA2tJHzz77LD179qRAgf/N0d60aRNLliyJzJIvX748zZs3Z+7cuTRt\n2jSyXvwHH3xAvXr1Ivf/+eefM2rUqExfGOy3du1aypUrR6FCh4+Q//SnP0Xe79u3j/PPP59Vq1bx\n5JNP0qlTJwAWLVrEoEGDMnzRcOB5R2rs2LGR93v37qV58+aULFmSGTNm0KVLl0z9TznlFMqUKUNs\nbGyGJY6yct9997Fv3z7mzJkTWUKoQYMGVKpUiWeffZZrr72WRYsW0a5dO3r37h0579JLL83xfRwN\nZ+ZLkiRJkiRJOu7q1q0bCfIBzjzzTIBMS8u88sorXHbZZYwePTrLIB/Swun9SpYsSenSpSMz89es\nWcN3332XIUQG6Nq1Kzt27OD//u//AGjSpAnvvfce+/btY968edSsWZP27dtHZubPmzePhISESJ1Z\nXTsmJoYqVaocdrmgI3HttdeyYsWKyIa5M2fOZN26dVx99dUZ+tWvXz/D5rnNmjUjPj4+8uuA2bNn\nU7FiRerUqcOePXsir+bNm7NkyZJsawiC4Ihq3bx5M3369OHUU0/lhBNOICYmhmeeeYaVK1dG+px9\n9tncddddPP7443zxxRdHNG5W/vWvf0U25S1UqBBxcXH89NNPGa51tGbPnk3r1q0pWrRo5DmddNJJ\n1KpVK/Kszj77bF599VVGjBjBkiVL2LdvX66ve6QM8yVJkiRJkiTlWqFChQ65ce7evXszzfAuUaJE\nhuMTTjgBgN27d2donzZtGgkJCZEZ3lnJaqz946xbtw6AMmXKZOiz/3jLli0ANG7cmG3btrF06VLm\nz59P48aNadiwIevXr+err75i/vz5NGrUKFPAnd21c6NatWo0aNCAf/zjH0DaEjtNmjTJtGlr6dKl\nM51bunTpyH1v2rSJVatWERMTk+F11113sXr16kNePzExkXXr1rFnz57D1nrFFVfw6quvcuutt/L2\n22+zePFirrzyygzP4YknnqB169YMHTqUKlWqHHJvg+x8+eWXtGrVisKFC5OSksJ7773H4sWLKV68\neJ48802bNvH0009nelbvv/9+5Fn9+c9/ZtiwYUyaNIm6detStmxZbr/99uMS6hvmS5IkSZIkScq1\nUqVKZdp4db9169ZlGTofibFjx5KYmEjLli2PapPR/bPWv//++wztGzZsACAhIQGA6tWrk5CQwPz5\n85k3bx5NmjShePHi1KxZk/nz50cC/uMpOTmZl19+mTVr1jB9+nSuueaaTH0Ovq/9bfvvOyEhgUqV\nKrF48eJMr3nz5h3y2k2bNmX37t28++672da4Y8cOZs2axciRI/nzn//MBRdcQFJSUqYvARISEnj0\n0UfZsGEDH3/8MbVq1aJLly6RWfqxsbGRden327p1a4bjGTNmsHfvXl599VUuueQSGjZsSPXq1dmx\nY0e2NR6phIQEOnfunOWz2r9hcsGCBRk4cCArVqxg1apV9O3bl9tvv51nnnkmT2rIjmG+JEmSJEmS\npFxr3LgxH374YaZlchYuXMiGDRuOOgiPj49n5syZALRq1SrHwW2FChUoX748kydPztD+8ssvEx8f\nz1lnnQWkLSnTqFEjXn75Zb744guaNGkCpC2/M2HCBNatW3fcw/wuXbqwd+9eunXrRkxMTKalggA+\n+OCDyCx8gDlz5rBjx47Imv3NmjVjzZo1nHTSSSQlJWV41a5d+5DXbtasGTVq1GDQoEHs3Lkz0+cf\nf/wx69ati2z8Wrhw4chnW7du5Y033shy3CAIOPvss7n77rvZu3dvZHmcChUq8OWXX/LLL79E+s6a\nNSvDubt27aJgwYIULFgw0vbCCy8cdiPdI/21RLNmzVi2bBk1a9bM9KyqVKmSqf9pp53Gbbfdximn\nnMJnn3122PFzyw1wJUmSJEmSJOVajx49eOCBB2jSpAlDhgzhtNNOY/ny5dx+++00bNiQVq1aHfXY\nJUuW5O2336Zx48a0a9eOt956i6JFix7RuQUKFGD48OH07t2bkiVL0qJFC959910ee+wxRo0aRWxs\nbKRv48aN+etf/0rVqlUjvyRo3LgxY8aMoWjRotmG38dCXFwcXbt25amnnuKaa66hWLFimfqcfPLJ\ntG3blqFDh/Lf//6XgQMH0rBhQ5o2bQpAu3btaNKkCc2aNWPQoEFUq1aNbdu28dFHHwEwYsSILK9d\noEABXnzxRS688ELq1q3LzTffzBlnnMH27dt58803eeqpp/j000+pWrUqZ511FkOHDiU2NpZ9+/Yx\n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\nTZvy4Ycf8vTTT0eWMtr/64Wsrjl//nzOP/98ihYtSsmSJenVqxc//PBD5PNt27aRnJxM+fLliY2N\n5dRTT6VXr17ZPkvlL2fmS5IkSZIkSTomvv32WwAqVap0yD4LFizghhtuoESJEowaNYrChQtn2W/L\nli00atSIkiVLX4rzBAAAIABJREFU8vjjj1O0aFHuvvtumjdvzsqVKylSpEiW57377rskJSVx8skn\nH7beVatW0aNHD/7whz/w888/88ILL9C4cWOWLVvG6aefDkD79u2pVq0azz33HIULF2bFihXZhvBZ\n2blzJ3v37mXkyJGUKlWK1atXM3LkSC677DJmzpyZ5TmPPvool156Kaeffjq33XYbQIalig703nvv\n0bx5czp27MiUKVPYvHkzgwcPZuvWrUyZMgWAW265hffff58HH3yQsmXLsnr1aubNm5ej+9DxZZgv\nSZIkSZIkKc/s2bMHgG+++YYbb7yRs88+mw4dOhyyf/369YmPjychISHT8jsHevDBB/nxxx/55JNP\nIuvvn3feeVSsWJEJEybQp0+fLM9bu3btES9DM3To0Mj7ffv20aJFCxYtWsRzzz3H0KFD2bRpE19/\n/TWvvfYaZ511FgDNmjU7orEPVKpUKR577LHI8Z49e6hUqRKNGjXi22+/5dRTT810zplnnkmxYsUo\nVapUts8JYPDgwTRs2JCXXnop0paYmEizZs1YunQpNWrUYNGiRfTp04euXbtG+lx55ZU5vhcdPy6z\nI0mSJEmSJClPbN68mZiYGGJiYqhcuTIff/wxqamph5xtnxOzZ8+mRYsWxMfHs2fPHvbs2cOJJ55I\nnTp1Mi2Fc7CsltfJyvLly+nUqRNlypShYMGCxMTEsGLFClauXAlAQkICp5xyCtdffz0vvfQS33//\n/VHfz7PPPss555xDXFwcMTExNGrUCCByraO1c+dOFixYQJcuXSLPac+ePTRq1IiYmBg+/PBDAM4+\n+2zuu+8+Hn300VxfU8eHYb4kSZIkSZKkPFG8eHEWL17MBx98wPjx4/n555+54oor2LdvX67H3rRp\nEy+99FLky4L9r3feeSfDmvwHS0xMjCz3k50ffviBli1bsnr1ah544AHmz5/P4sWLqVWrFrt37wag\nQIECzJo1i7Jly9KzZ0/Kli1L48aN+fjjj3N0L1OnTqVHjx40aNCAyZMn88EHHzB16lSAyLWO1tat\n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\ninKG+ZIkSZIkSZIkRTnDfEmSJEmSJEmSopxhviRJkiRJkiRJUc4wX5IkSZIkSZKkKGeYL0mSJEmS\nJElSlDPMlyRJkiRJkiQpyhnmS5IkSZIkSZIU5QzzJUmSJEmSJEmKcob5kiRJkiRJkiRFOcN8SZIk\nSZIkSZKinGG+JEmSJEmSJElRzjBfkiRJkiRJkqQoZ5gvSZIkSZIkSVKUM8yXJEmSJEmSJCnKGeZL\nkiRJkiRJkhTlDPMlSZIkSZIkSYpyhvmSJEmSJEmSJEU5w3xJkiRJkiRJkqKcYb4kSZIkSZIkSVHO\nMF+SJEmSJEmSpChnmC9JkiRJkiRJUpQzzJckSZIkSZIkKcoZ5kuSJEmSJEmSFOUM8yVJkiRJkiRJ\ninKG+ZIkSZIkSZIkRTnDfEmSJEmSJEmSopxhviRJkiRJkiRJUc4wX5IkSZIkSZKkKGeYL0mSJEmS\nJElSlDPMlyRJkiRJkiQpyhnmS5IkSZIkSZIU5QzzJUmSJEmSJEmKcob5kiRJkiRJkiRFOcN8SZIk\nSZIkSZKinGG+JEmSJEmSJElRzjBfkiRJkiRJkqQoZ5gvSZIkSZIkSVKUM8yXJEmSJEmSJCnKGeZL\nkiRJkiRJkhTlDPMlSZIkSZIkSYpyhvmSJEmSJEmSJEU5w3xJkiRJkiRJkqKcYb4kSZIkSZIkSVHO\nMF+SJEmSJEmSpChnmC9JkiRJkiRJUpQzzJckSZIkSZIkKcoZ5kuSJEmSJEmSFOUM8yVJkiRJkiRJ\ninKG+ZIkSZIkSZIkRTnDfEmSJEmSJEmSopxhviRJkiRJkiRJUc4wX5IkSZIkSZKkKFcovwuQJEmS\nJEmSfg2C24M8HS8cFubpeJJ+25yZL0mSJEmSJElSlDPMlyRJkiRJkiQpyhnmS5IkSZIkSZIU5Qzz\nJUmSJEmSJEmKcob5kiRJkiRJkiRFOcN8SZIkSZIkSZKinGG+JEmSJEmSJElRzjBfkiRJkiRJkqQo\nZ5gvSZIkSZIkSVKUM8yXJEmSJEmSJCnKGeZLkiRJkiRJkhTlDPMlSZIkSZIkSYpyhvmSJEmSJEmS\nJEU5w3xJkiRJkiRJkqKcYb4kSZIkSZIkSVHOMF+SJEmSJEmSpChnmC9JkiRJkiRJUpQzzJckSZIk\nSZIkKcoZ5kuSJEmSJEmSFOUM8yVJkiRJkiRJinKG+ZIkSZIkSZIkRTnDfEmSJEmSJEmSolyh/C5A\nkiRJkiRJ+jUIq+R3BZJ+z5yZL0mSJEmSJElSlDPMlyRJkiRJkiQpyhnmS5IkSZIkSZIU5fJ1zfyU\nIJgAtAO+Tw7DGultCcBLQEVgFdAlOQy3pgRBADwMtAF2Alcnh+FH6edcBQxJH/bO5DB8+njehyRJ\nkiRJkiRJx1J+z8yfCLQ+qG0wMCc5DKsAc9KPAS4CqqS/rgMeg0j4PwyoB5wLDEsJgpOOeeWSJEmS\nJEmSJB0n+RrmJ4fhPGDLQc0dgP0z658GOh7Q/kxyGIbJYfgBUCIlCMoBrYC3k8NwS3IYbgXeJvMX\nBJIkSZIkSZIk/Wrl98z8rJRJDsN16e/XA2XS3ycCqw/otya97VDtmQRBcF0QBEuCIFiycePGvK1a\nkiRJkiRJkqRjJBrD/IjkMAyBMK/GC8PwiTAMk8IwTCpVqlReDStJkiRJkiRJ0jEVjWH+hvTlc0j/\n9/v09rXAKQf0q5Dedqh2SZIkSZIkSZJ+E6IxzJ8GXJX+/irgtQPae6QEQZASBPWB7enL8cwEWqYE\nwUnpG9+2TG+TJEmSJEmSJOk3oVB+XjwlCF4AmgInpwTBGmAYcDfwckoQXAt8A3RJ7/4G0Ab4AtgJ\nXAOQHIZbUoLgDmBxer8RyWF48Ka6kiRJkiRJkiT9auVrmJ8cht0O8VGzLPqGQJ9DjDMBmJCHpUmS\nJEmSJEmSFDWicZkdSZIkSZIkSZJ0gHydmS9JkiRJkiT9Wiyt+X95Ol6NPB1N0m+dM/MlSZIkSZIk\nSYpyhvmSJEmSJEmSJEU5w3xJkiRJkiRJkqKcYb4kSZIkSZIkSVHOMF+SJEmSJEmSpChnmC9JkiRJ\nkiRJUpQzzJckSZIkSZIkKcoZ5kuSJEmSJEmSFOUM8yVJkiRJkiRJinKG+ZIkSZIkSZIkRTnDfEmS\nJEmSJEmSopxhviRJkiRJkiRJUc4wX5IkSZIkSZKkKGeYL0mSJEmSJElSlDPMlyRJkiRJkiQpyhnm\nS5IkSZIkSZIU5QzzJUmSJEmSJEmKcob5kiRJkiRJkiRFOcN8SZIkSZIkSZKinGG+JEmSJEmSJElR\nzjBfkiRJkiRJkqQoZ5gvSZIkSZIkSVKUM8yXJEmSJEmSJCnKFcrvAqTfii/jEvJ0vBp5OpokSZIk\nSZKkXzNn5kuSJEmSJEmSFOUM8yVJkiRJkiRJinKG+ZIkSZIkSZIkRTnDfEmSJEmSJEmSopxhviRJ\nkiRJkiRJUc4wX5IkSZIkSZKkKGeYL0mSJEmSJElSlDPMlyRJkiRJkiQpyhnmS5IkSZIkSZIU5Qzz\nJUmSJEmSJEmKcob5kiRJkiRJkiRFOcN8SZIkSZIkSZKinGG+JEmSJEmSJElRzjBfkiRJkiRJkqQo\nZ5gvSZIkSZIkSVKUM8yXJEmSJEmSJCnKGeZLkiRJkiRJkhTlDPMlSZIkSZIkSYpyhvmSJEmSJEmS\nJEU5w3xJkiRJkiRJkqKcYb4kSZIkSZIkSVHOMF+SJEmSJEmSpChnmC9JkiRJkiRJUpQzzJckSZIk\nSZIkKcoZ5kuSJEmSJEmSFOUM8yVJkiRJkiRJinJHHOanBEHxY1mIJEmSJEmSJEnKWk5m5q9NCYKn\nUoLg3GNWjSRJkiRJkiRJyiQnYf4G4BpgQUoQfJQSBL1TgiDuGNUlSZIkSZIkSZLSHXGYnxyGfwBa\nA1OB6sCjwHcpQTA+JQjqHKP6JEmSJEmSJEn63cvRBrjJYTgrOQw7A6cAQ4CNQC9gUUoQLE4JgmtT\ngqDoMahTkiRJkiRJkqTfrRyF+fslh+H3yWF41wGz9VOBmsATpM3WfyQlCM7MwzolSZIkSZIkSfrd\nOqow/yCfAcuBrUAAxAM3AP+XEgTPpQTBiXlwDUmSJEmSJEmSfrcKHc1JKUEQAG2B3qTNzC8IrAGG\nAhOA2sBfgSuAfUCPvChWkiRJkiRJkqTfoxyF+SlBUB5IBq4FKqQ3zyZtM9zpyWG4L73tO+D1lCCY\nRlroL0mSJEmSJEmSjtIRh/kpQfAacFH6OVuAB4HHksPwy2xO+wDDfEmSJEmSJEmSciUnM/PbA4tJ\nm4X/UnIY7j6Cc94Eth9NYZIkSZIkSZIkKU1Owvyk5DD8KCeDJ4fhx8DHOStJkiRJkiRJkiQdqEAO\n+jZNCYL62XVICYJ6KUFwSy5rkiRJkiRJkiRJB8hJmH8/0PIwfZoD9x19OZIkSZIkSZIk6WA5CfOP\nRCFgXx6PKUmSJEmSJEnS71peh/lnAVvyeExJkiRJkiRJkn7Xst0ANyUIph3UdEVKECRl0bUgcCpw\nJjAlj2qTJEmSJEmSJEkcJswH2h3wPgT+mP7Kyi5gBtAvD+qSJEmSJEmSJEnpDhfmn5j+bwDsAEYB\nd2XRb29yGO7Oy8IkSZIkSZIkSVKabMP85DD8cf/7lCDoCyw8sE2SJEmSJEmSJB17h5uZH5EchuOO\n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\nycbZSsn8w5N8ceLxRUl+bnKGUsojkzyyf/hfpZRPr1PftoLrJfnaFo23lZdtveNt5WVb73hbednW\nO95WXrb1jmfZxBtbrK0ebysv23rH28rLtt7xtvKyrXe8rbxs6x3Psok3tlhbPd5WXrb1jreVl20j\n4m1mN55mpq2UzF9WrfW0JKdtdD82o1LK+bXWY7ZivK28bOsdbysv23rH28rLtt7xtvKyrXc8yybe\n2GJt9XhbednWO95WXrb1jreVl229423lZVvveJZNvLHF2urxtvKyrXe8rbxsGxFvO7jaRndgQBcn\nudHE4yP6aQAAAAAAsKltpZH55yXZ1ZZyk3RJ/BOSPGxjuwQAAAAAAKu3ZUbmN7VeluQxSd6V5JNJ\n3tjU+q8b26stZb3LE61nvK28bOsdbysv23rH28rLtt7xtvKyrXc8yybe2GJt9XhbednWO95WXrb1\njreVl229423lZVvveJZNvLHF2urxtvKyrXe8rbxsGxFvyyu11o3uAwAAAAAAsIQtMzIfAAAAAAC2\nKsl8AAAAAAAYua10A1wG0Jby+SRHJdnV1PrZienHJnlfkls3te6bmP6oJC9M8uSm1lMHjLdc/adX\nNrWePFCsY9Mt25xLk3wqyV82tb51lhjz4j0wyaOT3DbJtZJcmORtSZ7R1PqliflOTvLyJK9tav3V\ntYjTlnJkkj1JfinJ9ZJ8OckZSZ7S1Pq1AWMenOQRy/z7+5taj50ixpP7PidJTXJJks8meXeSv2lq\n/crEvIt9XvY3td58uVjz4t4/yW8luV2S6yT5jyT/nKRtan3nvHmPTffZ+aem1jvPEmeijScneUxT\n6/UWeO4VSXY3tR6z2HdwpbHaUo5K8vmJp7+T5CtJzk3yoqbWD6wkxgxx79fU+rahYiwR5wdJbt7U\n+oWJ+e6b5KwkN2lqvWCIeAtM35Pkz5ta/2Sl7S8Woy3lakleneSBSY5P8n+TPDHJQ5IcmQPrsFc1\ntb50wHgPSfK1JO9tav2Vef93SJJPJ3lbU+spq4m3xHwrfk0n/v+zTa27Fnj+M0lunuTUptYnz1v/\nzPdrTa2vWYM4S67nhlq2ec8tuF2cxgqXddn3epXt70ny7qbWe82b901Jrrfctmclr2W/Df/tJLdI\nclmSC5K8r6n1cQPHKUlOSvKbSX4qyf8k+WiSZza1nrnUcs0aM4t/9ifdtan1nCljLvmeLLAfNuml\nTa3Ncp2ZJla69f7Tk9ywqfWrC7TxoCR/m+T2Ta0fGnC5rrLdntj3u05T638tt3xDxh64/Zrkxk2t\nX5w3b5vklEyxzzfle/fmJM9Mcpum1k/Mm+cP+//fvdx6bNb1RFvKbZL8YZJfSLIz3TbwfUme09R6\n3hCxFvj8/1eSi5N8IMnzmlr/31Jx5rU71Xpicv9ygTbOSfK1ptYHrXXMtpRrJfn7JLdJcvem1o8O\nGOuk/mFN8qV0r+cfzrLft8C+wJfTHRM8oal1/7x+XZjkRklu2tQ6uX89swXi/nuS85P8UVPrx/t5\njsoq9qen3Xa1pdwg3XfgfkmOSHe8cF6S05pa3zRUrHnHct9Nd/x1fpKXN7WeNWWcaepH37X//b4k\n30i3/rpiHdyW8ph0+19lwHh3SfIHSX5q8vPXH59/Islzm1r/eIq2lvx+tqWcn2RfDnz2l7LsMVBb\nyllJjmpqvfUizz8vya8mue4ysa6y/7mKWDdoav1eP+01SX4lya83tb5imT7MtXNKkjbJjZpaL5qY\n/vQkT8i8ffy2lHuk2ye/U1PrB/tp107y1SSl789/DhzrsiTvbGq93yLtvi3JzZpaf2ItljPJI7PI\n9mHA5ftQkp9vJmq+t6XsSPKxJF9pav3FpWLTMTKfK7Sl3CHdQX2SnDjF/CcneUGSp60wkb9UvDss\n8vPy/vl3DBhrzq/0MU5M8vUkb2lLucsscSbiPTPJG5N8LsmvJblnkmcnuXuS58+bfa4/x/c7tYPG\naUv5qSQfTnL7JH/cz/OXSf53kg+1pdxwwJi7cuX363XpEsST035rhnCX9P9zxyQnJHlLH3NvW8rt\n5s37zFz18zLVgcjEsj073QHjxUmaJL+YLkl6rSTvaEu52bx/mXvv7tjvkG1Gv5futbpPkqckOTTJ\nP7alTJPM2Qyunm4Hej3NfS5OGLrh/oDxJUkenORBTa3vSveZfWSS56V7H/+/dDvz9xk43v9OdwD9\nsLaUu86b9anp9imesNqYixjiNf1ukpu0pVxp57Qt5X+l2z58d978c+uf+T/vzNJWGmea9dxQMWfe\n5g8Vdx3av2f//JrH7JOIbZJ3JXlAkoenO1F+3JBxei/oY30o3XfxoekSIme0pUy7jps25uTn/W79\ntKfOm/6RKWMm078nc/thkz9/MUOc5WK9Id166sGLPH9Cks8tlcifIdZaW+vY07b/7XSfxSu0pVwj\n3fdh6pMUU8R8QZK9/e/JWEcm+ZN0A3BmOSG57PK1pTwgyb+k2y/63XT7hI9Pl7h695CxenOf/+PT\n7VffOsn5fcJkWkOsJ2a1ophtKddM8nfpBs/ca7lE/gpifSrd63nnJE9KcmySt/efz1lM7gv8XroT\nD2f3Cb05d06XyE+G2/ebjPvYdInw97Sl7Fxtw9Nuu9pSbpnuZMkvJ3lGumO+hyfZn+S1bSk/PVSs\n3tyx3D3THX99P917+7IpF23WbdfOdPu1KzVtvKenO6H0f+b9//9Jd9Liqavow3zXnBd/bvDNo+dN\n//IUbb0+ye62lJ+c/0RbykHpjrM/Mq/dTyV5+7xp7UCx3jKRyL9WunVlMts+7Af733ecN/2O6U5U\nLTT9e+lyKXOOS/LD6fID91+DWE9Nt9340fkN9tPume71WsoQy7mclca4c7rPxcnznn9sukEls+SK\ntjUj85l0Yrqd8n39309ZbMa2lBOTvDTdmeQ/HDpeU+u5C8S8dZKHpRuV/4ahYk34+Nzopf6s9xfT\nnQH+x1kCtaXcL8njkpzS1Dq58/H+tpTT0q2A5+a9frok+Nn97/ulS5QPEqdPxL0myTeT3KGp9dKJ\ned6W5OPpdoyX2hDNFHPyvWu7UW7fW+j9nNJl8/73XW0pL0z3npzelnKrptbL++cuWEWctKUcn24j\nstDZ/Vf3y/7fE/NfPd2OxXvT7cCdkOSvVhp/A3164nV7f5JXtKX8WZInt6W8f7mRl5vAOUl+oy3l\nKdOMcl6ttpTbpjvgOjvJ3dtSfrap9V8GDPG8dAdCJzS1vq0tZVeSeyV5SFPr307M94b++z9ovOSK\nESHPb0v56abWH/TL/JtJmqbWrw8Q80oGfE2/ne6g44R0o73mnJDuezw/cT5//bNecZZazw0VM5lh\nmz9w3LVs/xvpTsb+cabcrq0y5mOSvLip9Y8mpp3VljLNAIep47TdFWOPSvKbTa0vmpj3HW0pX0ny\nF20p72lqXS7BPlXMedvxg/s/96/w+zDLe3LFftgKLRmrqfWitpQPpFveKw2saEu5TroToM8eItYa\nW+vYs7R/VrrX8xkT0+6V5KB029/rDBGzqfXytrsa+Ny2lF+dGO333CQXJXnalHGWjZUk/UCXV6ZL\nmJw8OXowyevb7gq/QWJNmPz8v7ct5SVJXpbkhf3+2HJXHQy1npjaSmP2+9BvTJfUuddyVzmsMNa3\n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\nkgVmX/B72U5xJdOMcRZrY6H13FAxp94GDxx3ZrO2349m/cskD25LucUax3x0uit/XpHkP9pS/rUt\n5c/aUn5kwDjXS7d9ujCLuzDTbcfX/P1aJOa078nHctXv3DQ38ps6Vp+cfU8mRry109egnSnWhIWW\na6abk68i9nq0f3oOnBy5b7orqGZOAE4Ts//8Pj7dSNpD0yUDZjZFrMMz0P7uAO/VNPtjK1lP3C4L\n73tOe2JwJTF/Jl0J0yc0tc4ygGZF68F+3/3qbSlHpzuGfedKjiUnjgNukW7E6X/mwGf8xHT3WntP\nU+vcIJ9B6uZPxL1Zun3Zj6UrR7Ja02y7Dk9XLmW1JWBWtZ3sXZQuabrq+wUs4Gnp9ivX/Jirvyr+\nxelOCD2jqXWpz/NYvCPd/uLkZ/peSX40KztpO0SsB6RbH0weG8xy/7p/SleqZu5eJndM8s99buvc\nHBhpPvd7sizXiUk+2V+ZsjfJv2bp4/+VxnpjuhOrk1ccPDhd/nbactOrWc5prThGU+vp6QYP/kWS\n05ta37OC+NuaZD6TN6r6u6bW7/eTT09XRuEO82Z/d7qdv5PXI15/NvLl6UYoPn0tY+XAwdZX0x0c\nnNzU+ulZY/amOdExt6F6Q5I0tZ6f7vLRWRLCg4+EHWnMhcxPOv11ug3J5M+TZ2xz/rI9Plc+wJm7\nGmWuTt/pSdLU+u/pPqMrTeZfkqv2/X8lmfYy7rWwIVcFrIU+SfW8JI+Z8eBhVnM1yOfet79Pd8C3\n2hFal6a73PKUtpTbzH+yHzl/4yS/ke4zeYskp2XlNVWXjNfH/EEOnOz86xXGmcZavKanJ3lQ2918\n70FZvLzIYt/LLy0y/0rjLGXW7+GyMWfcLg4Wd5Vmbf816RJxK72nz1Qxm1o/nuQn0o0yfUG69+tP\n09208uD58680zhrYiJjTvCcn5Krft5WUIFgu1uuTHNOWctP+8QPSHYyu5HVY6XJNc1+FIWKvR/tv\nTFeq69bplvXNTa2XrVXMptbXplsPv7rf/1qp5WINub+7mvdqrfbHPpmFt3GD1dRfwOfS3Tz199tS\nhigXs5S5kxXfT1ei5keysn2HyRP7n05y0yQPbWr9cn815P3T3ZjzB/38pye5WVvKz66y/5NxP5vu\nRMgDZiwptaAZtl2r/g4MtJ1cs2OSptb96d6zJ7ZdCag103YlR05I97qudqDPuuj3E9+SifJ86U7e\n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\nGAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 1872x864 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OpUlwSSdNou8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "605e328a-e148-44ef-9868-72ef075b53b6"
      },
      "source": [
        "ytest= np.arange(len(states))\n",
        "ytest"
      ],
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n",
              "       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n",
              "       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 159
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IjiTqQRhLzN7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 323
        },
        "outputId": "b562ef9c-4c72-4f86-d5c4-7753a0a25931"
      },
      "source": [
        "#### horizontal ###\n",
        "plt.figure(figsize=(10,5))\n",
        "barWidth = 0.35\n",
        "graphhand = plt.barh(ytest, height=handgun_bar, width=barWidth)\n",
        "graphrifle = plt.barh(ytest, height=rifle_bar, width=barWidth, left=handgun_bar)\n",
        "graphshotgun = plt.barh(ytest, height=shotgun_bar, width=barWidth, left=handgun_bar+rifle_bar)\n",
        "graphunknown = plt.barh(ytest, height=unknown_bar, width=barWidth, left=handgun_bar+rifle_bar+shotgun_bar)\n",
        "\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 161,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nT1fVX1fVoxxPi6Gq3llVd1XVp1eMPezjp6r2T9vfXlX7N/rnWOgQq6otSd6W5NIke5K8pKr2jJ3V\npnZfktd2954kFyV55bQ/rkzy4e7eneTD03Iy22+7p68rkrx946e8ab06ya0rlv8oyVXd/YQk9yS5\nfBq/PMk90/hV03ZsnDcn+cfufmKSn85snzmeFkRVbU/y60n2dveTk2xJclkcT4viL5Nc8qCxh3X8\nVNW5Sd6U5OlJnpbkTSfjbaMsdIhl9odyuLvv6O5vJHlPkn2D57Rpdfex7v749Pjrmf3S2J7ZPrl2\n2uzaJC+cHu9L8q6euTHJ2VV1/gZPe9Opqh1JfiHJO6blSvKsJNdNmzx4H53cd9cluXjanlOsqs5K\n8vNJrkmS7v5Gd381jqdFszXJD1TV1iRnJjkWx9NC6O5/SXL3g4Yf7vHz3CQ3dPfd3X1PkhvynXF3\nSi16iG1PcueK5SPTGINNp9yfmuSmJI/r7mPTqi8kedz02P4b48+SvC7JN6flxyT5anffNy2v3A8P\n7KNp/fFpe069C5J8KclfTJeR31FVj47jaWF099Ekf5Lk85kF2PEkh+J4WmQP9/gZflwteoixgKrq\nB5P8bZLf6O6vrVzXs89D8Zkog1TV85Pc1d2HRs+FVW1NcmGSt3f3U5P8b751GSWJ42m06RLVvsyi\n+UeSPDobfLaER25Zjp9FD7GjSXauWN4xjTFIVX1/ZhH27u5+3zT8xZOXSKbvd03j9t/Ge0aSF1TV\nf2d2Kf9Zmd2HdPZ0aSX59v3wwD6a1p+V5CsbOeFN7EiSI91907R8XWZh5nhaHM9O8l/d/aXu/r8k\n78vsGHM8La6He/wMP64WPcQ+lmT39A6VMzK7SfLA4DltWtO9DtckubW7/3TFqgNJTr7TZH+S968Y\nf9n0bpWLkhxfccqYU6C7X9/dO7p7V2bHy0e6+6VJPprkRdNmD95HJ/fdi6btF/5fkKeD7v5Ckjur\n6iemoYuTfCaOp0Xy+SQXVdWZ099/J/eR42lxPdzj5/okz6mqc6YzoM+ZxjbMwn+yflU9L7N7XrYk\neWd3/8HgKW1aVfVzSf41yc351v1Hb8jsPrH3JvnRJJ9L8uLuvnv6i+utmZ3KP5Hk5d19cMMnvklV\n1TOT/FZ3P7+qfjyzM2TnJvlEkl/q7nur6lFJ/iqz+/3uTnJZd98xas6bTVX9TGZvqjgjyR1JXp7Z\nP5AdTwuiqn43yS9m9q7xTyT51czuIXI8DVZVf53kmUnOS/LFzN79+Pd5mMdPVb0is99lSfIH3f0X\nG/pzLHqIAQCcrhb90iQAwGlLiAEADCLEAAAGEWIAAIMIMQCAQYQYAMAgQgwAYJD/B72jcNW0VhfU\nAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3XiRDziWb0vz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "outputId": "c4ccf6e2-6f92-4359-8dd7-f7e16bef2768"
      },
      "source": [
        "import plotly.graph_objects as go\n",
        "\n",
        "fig = go.Figure()\n",
        "fig.add_trace(go.Bar(\n",
        "    y=states,\n",
        "    x=handgun_bar,\n",
        "    name='Handgun',\n",
        "    orientation='h',\n",
        "    marker=dict(\n",
        "        color='rgba(255,20,147,.5)',\n",
        "        line=dict(color='rgba(255,20,147,1.0)', width=3)\n",
        "    )\n",
        "))\n",
        "fig.add_trace(go.Bar(\n",
        "    y=states,\n",
        "    x=rifle_bar,\n",
        "    name='Rifle',\n",
        "    orientation='h',\n",
        "    marker=dict(\n",
        "        color='gray',\n",
        "        line=dict(color='gray', width=3)\n",
        "    )\n",
        "))\n",
        "\n",
        "fig.add_trace(go.Bar(\n",
        "    y=states,\n",
        "    x=shotgun_bar,\n",
        "    name='Shotgun',\n",
        "    orientation='h',\n",
        "    marker=dict(\n",
        "        color='green',\n",
        "        line=dict(color='green', width=3)\n",
        "    )\n",
        "))\n",
        "\n",
        "fig.add_trace(go.Bar(\n",
        "    y=states,\n",
        "    x=shotgun_bar,\n",
        "    name='Unknown',\n",
        "    orientation='h',\n",
        "    marker=dict(\n",
        "        color='lightblue',\n",
        "        line=dict(color='lightblue', width=3)\n",
        "    )\n",
        "))\n",
        "\n",
        "fig.update_layout(barmode='stack')\n",
        "fig.show()"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>\n",
              "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>\n",
              "                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>    \n",
              "            <div id=\"5916937f-1ce9-4689-ad6e-834d4763adb7\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
              "            <script type=\"text/javascript\">\n",
              "                \n",
              "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
              "                    \n",
              "                if (document.getElementById(\"5916937f-1ce9-4689-ad6e-834d4763adb7\")) {\n",
              "                    Plotly.newPlot(\n",
              "                        '5916937f-1ce9-4689-ad6e-834d4763adb7',\n",
              "                        [{\"marker\": {\"color\": \"rgba(255,20,147,.5)\", \"line\": {\"color\": \"rgba(255,20,147,1.0)\", \"width\": 3}}, \"name\": \"Handgun\", \"orientation\": \"h\", \"type\": \"bar\", \"x\": [12, 156, 72, 930, 87, 24, 17, 421, 12, 13, 728, 169, 25, 43, 143, 219, 2, 309, 34, 191, 42, 101, 211, 6, 30, 21, 4, 212, 13, 305, 262, 5, 197, 135, 32, 395, 5, 172, 7, 202, 630, 31, 2, 151, 69, 30, 119, 1], \"y\": [\"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \"Connecticut\", \"Delaware\", \"Georgia\", \"Hawaii\", \"Idaho\", \"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Maine\", \"Maryland\", \"Massachusetts\", \"Michigan\", \"Minnesota\", \"Mississippi\", \"Missouri\", \"Montana\", \"Nebraska\", \"Nevada\", \"New Hampshire\", \"New Jersey\", \"New Mexico\", \"New York\", \"North Carolina\", \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\", \"Tennessee\", \"Texas\", \"Utah\", \"Vermont\", \"Virginia\", \"Washington\", \"West Virginia\", \"Wisconsin\", \"Wyoming\"]}, {\"marker\": {\"color\": \"gray\", \"line\": {\"color\": \"gray\", \"width\": 3}}, \"name\": \"Rifle\", \"orientation\": \"h\", \"type\": \"bar\", \"x\": [4, 16, 11, 37, 4, 0, 0, 20, 3, 1, 14, 12, 2, 5, 7, 26, 1, 2, 0, 15, 2, 4, 23, 4, 0, 2, 1, 1, 1, 2, 20, 2, 7, 9, 6, 10, 0, 7, 0, 10, 51, 1, 2, 10, 11, 2, 6, 0], \"y\": [\"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \"Connecticut\", \"Delaware\", \"Georgia\", \"Hawaii\", \"Idaho\", \"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Maine\", \"Maryland\", \"Massachusetts\", \"Michigan\", \"Minnesota\", \"Mississippi\", \"Missouri\", \"Montana\", \"Nebraska\", \"Nevada\", \"New Hampshire\", \"New Jersey\", \"New Mexico\", \"New York\", \"North Carolina\", \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\", \"Tennessee\", \"Texas\", \"Utah\", \"Vermont\", \"Virginia\", \"Washington\", \"West Virginia\", \"Wisconsin\", \"Wyoming\"]}, {\"marker\": {\"color\": \"green\", \"line\": {\"color\": \"green\", \"width\": 3}}, \"name\": \"Shotgun\", \"orientation\": \"h\", \"type\": \"bar\", \"x\": [1, 10, 3, 36, 4, 1, 0, 14, 2, 0, 5, 2, 1, 1, 8, 7, 3, 3, 0, 12, 1, 6, 6, 3, 0, 0, 1, 3, 0, 9, 22, 0, 8, 9, 1, 12, 0, 9, 0, 7, 31, 0, 1, 10, 5, 0, 4, 1], \"y\": [\"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \"Connecticut\", \"Delaware\", \"Georgia\", \"Hawaii\", \"Idaho\", \"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Maine\", \"Maryland\", \"Massachusetts\", \"Michigan\", \"Minnesota\", \"Mississippi\", \"Missouri\", \"Montana\", \"Nebraska\", \"Nevada\", \"New Hampshire\", \"New Jersey\", \"New Mexico\", \"New York\", \"North Carolina\", \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\", \"Tennessee\", \"Texas\", \"Utah\", \"Vermont\", \"Virginia\", \"Washington\", \"West Virginia\", \"Wisconsin\", \"Wyoming\"]}, {\"marker\": {\"color\": \"lightblue\", \"line\": {\"color\": \"lightblue\", \"width\": 3}}, \"name\": \"Unknown\", \"orientation\": \"h\", \"type\": \"bar\", \"x\": [1, 10, 3, 36, 4, 1, 0, 14, 2, 0, 5, 2, 1, 1, 8, 7, 3, 3, 0, 12, 1, 6, 6, 3, 0, 0, 1, 3, 0, 9, 22, 0, 8, 9, 1, 12, 0, 9, 0, 7, 31, 0, 1, 10, 5, 0, 4, 1], \"y\": [\"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \"Connecticut\", \"Delaware\", \"Georgia\", \"Hawaii\", \"Idaho\", \"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Maine\", \"Maryland\", \"Massachusetts\", \"Michigan\", \"Minnesota\", \"Mississippi\", \"Missouri\", \"Montana\", \"Nebraska\", \"Nevada\", \"New Hampshire\", \"New Jersey\", \"New Mexico\", \"New York\", \"North Carolina\", \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\", \"Tennessee\", \"Texas\", \"Utah\", \"Vermont\", \"Virginia\", \"Washington\", \"West Virginia\", \"Wisconsin\", \"Wyoming\"]}],\n",
              "                        {\"barmode\": \"stack\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}},\n",
              "                        {\"responsive\": true}\n",
              "                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('5916937f-1ce9-4689-ad6e-834d4763adb7');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })\n",
              "                };\n",
              "                \n",
              "            </script>\n",
              "        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}